

# This file was *autogenerated* from the file derive.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_252 = Integer(252); _sage_const_27742317777372353535851937790883648493 = Integer(27742317777372353535851937790883648493); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_0p001 = RealNumber('0.001')# Adapted from the JubJub script.
q = _sage_const_2 **_sage_const_252  + _sage_const_27742317777372353535851937790883648493 
Fq = GF(q)

# We want to find an Edwards curve with a small 'd' parameter.
# To check conditions on the order, we transfer to the isogenous Montgomery
# curve.
def get_A(d):
    # a = 1, so 2 - 4*d/a = 2 - 4*d
    return _sage_const_2  - _sage_const_4 *d

# Instead of searching for a curve of order 8 with twist order 4,
# allow searching for a curve of order 4 with twist order 8, or vv
desired_cofactor = _sage_const_4 
desired_twist_cofactor = _sage_const_8 

import random
from datetime import datetime

def check(d):
    # We want d to be nonsquare
    if Fq(d).is_square():
        return False

    A = Fq(get_A(d))

    ec = EllipticCurve(Fq, [_sage_const_0 , A, _sage_const_0 , _sage_const_1 , _sage_const_0 ])
    o = ec.order()

    if (o % desired_cofactor == _sage_const_0 ):
        o = o // desired_cofactor
        if is_prime(o):
            twist = ec.quadratic_twist()
            otwist = twist.order()
            if (otwist % desired_twist_cofactor == _sage_const_0 ):
                otwist = otwist // desired_twist_cofactor
                if is_prime(otwist):
                    print("FOUND CURVE d = %s", d)
                    print("ORDER = ", o)
                    return True

    if random.random() < _sage_const_0p001 :
        print("%s: did not find curve at d = %s" % (datetime.now(), d))

    return False

def check_abs(d):
    return (check(d), check(-d))

import multiprocessing as mp

def check_parallel(start, end):
    candidates = range(start, end)
    with mp.Pool(_sage_const_8 ) as p:
        # Just discard the results and rely on stdout
        # instead of syncing progress across threads
        p.map(check_abs, candidates, chunksize=_sage_const_1 )
    

if __name__ == "__main__":
    check(-63071)